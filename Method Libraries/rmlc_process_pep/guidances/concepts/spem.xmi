<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-y-3vLixbXWPiismnSut-Cw" name="new_concept,_G2WO8BV-EeOODbTkX__Yaw" guid="-y-3vLixbXWPiismnSut-Cw" authors="Rakesh D. Rathod" changeDate="2013-09-04T12:25:10.419-0400" changeDescription="Baseline" version="1.0">
  <mainDescription>&lt;p>&#xD;
    Throughout the software industry there are a lot of great ideas and knowledge available about how to effectively&#xD;
    develop software. Nowadays, development teams need and have access to a wide range of information. Not only do they&#xD;
    need to acquire detailed information about specific development technologies such as Java, Java EE, Eclipse, SOA&#xD;
    technologies, .NET, as well as various development and tool environments, but they also need to figure out how to&#xD;
    organize their work along modern development best practices such as agile, iterative, architecture-centric, risk- and&#xD;
    quality-driven software&lt;br />&#xD;
    development.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Some problems development organizations face when they leave their developers to find such information for&#xD;
    themselves&lt;br />&#xD;
    are:&#xD;
&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        team members will not have centralized and easy access to the same body of information when they need it, i.e.,&#xD;
        different developers might rely on different sources and versions of the same information;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        it is difficult to combine and integrate content and development processes that are made available in their own&#xD;
        proprietary format, as every book and publication presents method content and process using a different&#xD;
        representation and presentation style;&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        it is hard to define an organized and systematic development approach that is right-sized to their needs, i.e.,&#xD;
        addresses their specific culture, standardized practices, and compliance requirements.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>&#xD;
    &lt;br />&#xD;
    The Software and Systems Process Engineering Meta-model (SPEM) is a process engineering meta-model as well as&#xD;
    conceptual framework, which can provide the necessary concepts for modeling, documenting, presenting, managing,&#xD;
    interchanging, and enacting development methods and processes. An implementation of this meta-model would be targeted&#xD;
    at process engineers, project leads, project and program managers who are responsible for maintaining and implementing&#xD;
    processes for their development organizations or individual projects.&#xD;
&lt;/p>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
        &lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
            &lt;p>&#xD;
                &lt;img style=&quot;WIDTH: 686px; HEIGHT: 513px&quot; alt=&quot;&quot; src=&quot;./resources/SPEM%20Conceptual%20Usage%20Framework.png&quot;&#xD;
                width=&quot;600&quot; height=&quot;513&quot; />&#xD;
            &lt;/p>&#xD;
        &lt;/blockquote>&#xD;
    &lt;/blockquote>&#xD;
&lt;/blockquote>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    [The figure above] presents a conceptual framework for the usage of a SPEM 2.0 implementation:&#xD;
&lt;/p>&#xD;
&lt;ul dir=&quot;ltr&quot;>&#xD;
    &lt;li>&#xD;
        &lt;div>&#xD;
            To provide a standardized representation and managed libraries of reusable method content: Developers need to&#xD;
            understand the methods and key practices of software development. They need to be familiar with the basic&#xD;
            development tasks, such as how to elicit and manage requirements, how to do analysis and design, how to&#xD;
            implement for a design or for a test case, how to test implementations against requirements, how to manage the&#xD;
            project scope and change, and so on. They further need to understand the work products such tasks create as&#xD;
            well as which skills are required. SPEM 2.0 aims to support development practitioners in setting-up a knowledge&#xD;
            base of intellectual capital for software and systems development that would allow them to manage and deploy&#xD;
            their content using a standardized format. Such content could be licensed, acquired, and, more importantly,&#xD;
            their own homegrown content consisting of, for example, method definitions, whitepapers, guidelines, templates,&#xD;
            principles, best practices, internal procedures and regulations, training material, and any other general&#xD;
            descriptions of how to develop software. This knowledge base can be used for reference and education and forms&#xD;
            the basis for developing processes (see the next bullet point).&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div>&#xD;
            To support systematic development, management, and growth of development processes: Development teams need to&#xD;
            define how to apply their development methods and best practices throughout a project lifecycle. In other&#xD;
            words, they need to define or select a development process. For example, requirements management methods have&#xD;
            to be applied in one fashion during the early phases of a project, where the focus is more on elicitation of&#xD;
            stakeholder needs and requirements and scoping a vision. The same methods have to be performed in a different&#xD;
            fashion during later phases, where the focus is on managing requirements updates and changes and performing&#xD;
            impact analysis of these requirements changes. The same requirements methods might also be applied differently&#xD;
            if the project develops a new system or maintains an existing system as well as depending on the teams and&#xD;
            distribution of the teams. A development process model needs to support expressing these differences. Teams&#xD;
            also need a clear understanding of how the different tasks within the methods relate to each other: for&#xD;
            example, how the change management method impacts the requirements management method as well as the regression&#xD;
            testing method through out the lifecycle. SPEM 2.0 supports the systematic creation of processes based on&#xD;
            reusable method content. Lifecycle independent method content can be placed into a process for a specific&#xD;
            development lifecycle. Such processes can be represented as workflows and/or breakdown structures. Within these&#xD;
            process the reused method content can then be refined for its specific context. SPEM 2.0 also provides the&#xD;
            conceptual foundation for process engineers and project managers for selecting, tailoring, and rapidly&#xD;
            assembling processes for their concrete development projects. The vision for SPEM 2.0 is that vendors can sell&#xD;
            with their SPEM 2.0 implementation catalogs of pre-defined processes for typical project situations that can be&#xD;
            adapted to individual needs. Within these catalogs, the implementation could offer process building blocks or&#xD;
            process patterns that represent references processes for specific disciplines, technologies, or development&#xD;
            styles. These process patterns could form a toolkit for quickly assembling processes based on project specific&#xD;
            needs.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div>&#xD;
            To support deployment of just the method content and process needed by defining configurations of processes and&#xD;
            method content: No development project is exactly like another and the same development process is never&#xD;
            executed twice. Reference frameworks for development processes such as CMMI define different levels of maturity&#xD;
            for processes. Each level entails different characteristics for the process definition as well as enactment in&#xD;
            an organization or project for each level. For example, CMMI defines a “managed process” as performed&#xD;
            activities that can be recognized as implementations of development practices. Such a process has certain&#xD;
            characteristics: it is planned and executed in accordance with policies; it employs skilled people, having&#xD;
            adequate resources to produce controlled outputs; it involves relevant stakeholders; it is monitored,&#xD;
            controlled, and reviewed; and it is evaluated for adherence to its process description. By contrast, a “defined&#xD;
            process” is a managed process that is tailored from the organization’s set of standard processes according to&#xD;
            the organization’s tailoring guidelines. A defined process has a maintained process description and contributes&#xD;
            work products, measures, and other process-improvement information to the organizational process assets. The&#xD;
            notions of Activity Use, Configurability, and Variability for development processes (as well as method content)&#xD;
            in SPEM 2.0 exactly address the needs for defined processes. These concepts provide capabilities for reuse of&#xD;
            processes or process patterns, for modeling variability (i.e., processes that comprise of configurable&#xD;
            alternative parts) and for tailoring allowing users to define their own extensions, omissions, and variability&#xD;
            points on reused standard processes. Hence, the SPEM usage scenario is that organizations can provide libraries&#xD;
            of reusable process and method using the capabilities describes in the first two bullet points. Team leads can&#xD;
            then select and tailor the method content and processes that they require. They can then describe these&#xD;
            selections and customizations with a SPEM Method Configuration, which they can deploy to their teams, only&#xD;
            providing the content they really need.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;div>&#xD;
            To support the enactment of a process for development projects: A process definition only provides value if it&#xD;
            impacts and steers development teams’ behavior. Processes as well as guiding method content need to be&#xD;
            available in the context of daily work of project managers, technical leads, and developers. They therefore&#xD;
            need to be deployed in formats that are ready for enactment with the process enactment systems of the team’s&#xD;
            choice. Typical enactment systems are project and resource planning systems, work backlog tracking systems, and&#xD;
            workflow engines. SPEM 2.0 provides process definition structures that allow process engineers to express how a&#xD;
            process shall be enacted within these systems. For example, SPEM 2.0 process definition can include information&#xD;
            that indicates that modeled work definitions shall be repeated several times in a project (modeling iterations)&#xD;
            or that there could be multiple occurrences of work definitions that can be performed in parallel.&#xD;
        &lt;/div>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p dir=&quot;ltr&quot;>&#xD;
    Although, the SPEM 2.0 meta-model has been designed around the support for this framework, many other usage scenarios&#xD;
    could be realized as well. For example, Chapter 2 defines different compliance points and discusses different&#xD;
    implementation scenarios that might realize a variation of the scenarios depicted in [the figure above].&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
