<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-0GEBDhy6pgcDBC39p0be9Q" name="new_toolmentor,_Qqj_kPrmEeKlqMNsbbcDlQ" guid="-0GEBDhy6pgcDBC39p0be9Q" authors="Shane T. Ficorilli" changeDate="2013-08-02T12:44:42.065-0400" changeDescription="Baseline&#x9;" version="1.0">
  <mainDescription>&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;5&quot;>Understanding EPFC Organization&lt;br />&#xD;
    &lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Plug-In Architecture&lt;br />&#xD;
    &lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Plug-ins are inherent to EPFC and are a composition structure used to group methodology elements for purposes of&#xD;
    organization and architecture. Because plug-ins provide the required separation of objects for object hierarchy,&#xD;
    inheritance, and propagation, plug-ins are a structural component.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Objects (discipline and methodology elements) are inherited from top down. In other words, object hierarchy is from&#xD;
    bottom to top. In any case, modification of domain content takes place in the domain layer. Modification of IT-wide and&#xD;
    enterprise-wide objects takes place in the FNFGCore layer.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Objects must never be modified in the Core Out Of The Box (OOTB) layer as upgrades to EPFC will overwrite manual&#xD;
    changes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Each plug-in (FNFGCore, PMM, RMM, QMM, etc.) maintains only that plug-in’s content type. For example, the PMM plugin&#xD;
    will only contain discipline and methodology content relevant to the Project Management Methodology. Segregation of&#xD;
    domain layer plug-ins makes it possible to give ownership of the content to the appropriate area of the&#xD;
    organization.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Content Architecture&lt;br />&#xD;
    &lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Plug-ins contain an organized mix of method content, category information, and processes.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;4&quot;>&lt;strong>&lt;font size=&quot;5&quot;>Content Modifications&lt;br />&#xD;
    &lt;/font>&lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Additions&lt;br />&#xD;
    &lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Content is added in a plug-in using bottom-to-top, then top-to-bottom approach.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    Sequence of changes first start from Guidance up the chain to Roles, and then from Content Packages to Processes. The&#xD;
    starting point for adding content will depend on the content type.&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To add content to a plug-in, follow these steps:&lt;br />&#xD;
    Step 1. Right click on the Content Element Heading and click “New”.&lt;br />&#xD;
    Step 2. On the sub menu, select the desired element type.&lt;br />&#xD;
    Step 3. A new element of the desired type is created.&lt;br />&#xD;
    Step 4. Enter values in appropriate fields for the new element. Use tabs to switch to additional fields.&lt;br />&#xD;
    Step 5. Once all mandatory and optional values have been entered, click “File/Save” or the Save icon on the&#xD;
    toolbar.&lt;br />&#xD;
    Step 6. Close the content element: click “File/Close” or the Close “x” button on the content element tab.&lt;br />&#xD;
    Step 7. Repeat steps 1 - 6 for each element on the development path.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;3&quot;>Modifications&lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To modify content of a plug-in, follow these steps:&lt;br />&#xD;
    Step 1. Right click the content element name, and select “Edit”. Alternately, double-click the content element&#xD;
    name.&lt;br />&#xD;
    Step 2. The content element is open for editing.&lt;br />&#xD;
    Step 3. Make the necessary changes to field values. Use tabs to switch to additional fields.&lt;br />&#xD;
    Step 4. Once desired values have been modified, click “File/Save” or the Save icon on the toolbar.&lt;br />&#xD;
    Step 5. Close the content element: click “File/Close” or the Close “x” button on the content element tab.&lt;br />&#xD;
    Step 6. If the modification results in changes “upstream”, repeat steps 1 - 6 for each element on the development&#xD;
    path.&lt;br />&#xD;
    &lt;br />&#xD;
    &lt;strong>&lt;font size=&quot;5&quot;>Plug-In Modifications&lt;br />&#xD;
    &lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    The OpenUp environment at FNFG is configured for multiple authors. To accommodate simultaneous content development,&#xD;
    authors are “assigned” plug-ins which only they alter. Any plug-ins altered outside of the assigned plug-in are ignored&#xD;
    during the re-integration, or importing process. Importing plug-ins&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;font size=&quot;3&quot;>&lt;strong>Exporting Plug-Ins&lt;br />&#xD;
    &lt;/strong>&lt;/font>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To export a plug-in, follow these steps:&lt;br />&#xD;
    Step 1. Click “File/Export…”.&lt;br />&#xD;
    Step 2. In the Export Destination list, select “Method Plug-ins”. Click the “Next” button.&lt;br />&#xD;
    Step 3. In the Method Plug-Ins list, select the desired plug-ins, then click the “Next” button.&lt;br />&#xD;
    Step 4. Review the dependency list for correctness. Click the “Next” button.&lt;br />&#xD;
    Step 5. On the Confirm Export dialog box, click the “Next” button.&lt;br />&#xD;
    Step 6. On the Specify Export Directory dialog box, specify the directory location where the exported files will be&#xD;
    stored. Use the “Browse…” button to select a suitable location. Click the “Finish” button.&lt;br />&#xD;
    Step 7. The plug-ins will be exported.&lt;br />&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    &lt;strong>&lt;font size=&quot;3&quot;>Importing Plug-Ins&lt;br />&#xD;
    &lt;/font>&lt;/strong>&#xD;
&lt;/p>&#xD;
&lt;p>&#xD;
    To import a plug-in, follow these steps:&lt;br />&#xD;
    Step 1. Back-up the current installation of EPFC.&lt;br />&#xD;
    Step 2. In the Library tree, right-click the plug-in and select “Delete” from the sub-menu.&lt;br />&#xD;
    Step 3. Confirm deletion by clicking “OK”. If the Confirm References Removal dialog box appears, confirm the deletion&#xD;
    of references by clicking “OK”.&lt;br />&#xD;
    Step 4. Verify the plugin has been removed by navigating the Library.&lt;br />&#xD;
    Step 5. Click “File/Import…”.&lt;br />&#xD;
    Step 6. Select “Method Plug-ins” from the list of import sources. Click the “Next” button.&lt;br />&#xD;
    Step 7. On the Specify Import Directory dialog box, specify the directory location where the imported files are&#xD;
    located. Use the “Browse…” button to select a suitable location. Select the “Ignore and remove unresolved references”&#xD;
    option by clicking on the corresponding radio button. Click the “Next” button.&lt;br />&#xD;
    Step 8. Click the box next to the plug-in name to check it for importing. Click the “Finish” button.&lt;br />&#xD;
    Step 9. At the Backup Library dialog box, click the “Skip” button. This step is not required since the entire library&#xD;
    was backed up in Step 1 of this process.&lt;br />&#xD;
    Step 10. Once the import is complete, right click the plug-in name and select “Validate” from the sub-menu.&lt;br />&#xD;
    Step 11. If errors or warnings appear in the “Problems” tab at the bottom of the screen, determine which plug-in has&#xD;
    caused the problem and validate that plug-in. Use “Quick Fix” option to fix references between plug-ins.&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
